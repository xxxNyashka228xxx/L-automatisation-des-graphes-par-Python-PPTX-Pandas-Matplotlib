###  ACHTUNG! Ограничения работы скрипта : ###
#
# 1) Выводятся только следующие линии: 
#     1 величина из 2-х расчётов, 1 дде для двух расчётов, 1 экарт между расчётами и 1 экарт между дде.
# 2) Базы времён у расчётов и дде должны быть одинаковыми
# 3) Скрипт заточен под запил картинки следующей конституции :
#     1 главный график сверху, 2 вспомогательных зума внизу
#
#########*****IMPORT PETROVICH*****##########
# Импорт всех необходимых библиотек. Их имена идут после команды "import".
# Должны быть установлены на аппарате, из-под которого расчехляется скрипт
from pptx import Presentation
from pptx.util import Inches, Pt
from pptx.dml.color import RGBColor
from pptx.enum.text import MSO_AUTO_SIZE

import os

from io import BytesIO

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
##############################################
path0 = os.getcwd()
path_to_template = path0 + "\\Plot_zapil_TRF.xls"

template = pd.read_excel(path_to_template, 'Sheet1', header = 1)

calc_1_ind_define = pd.read_excel(template.iloc[0,0], template.iloc[0,1], index_col = int(template.iloc[0,9]), header = int(template.iloc[0,10]))

start_row_ind = 0
##############################################
prs = Presentation(template.iloc[0,30])
left = Inches(0.2)
top = Inches(1)
width = Inches(7)
height = Inches(4.5)

control_point_counter = 0
for control_point in template.iloc[0:,22] :
    if str(control_point) != "nan" :
        control_point_counter += 1
        

##############################################
#Запиливание пачки листов, которые есть суть диапозоны оси Х для зумов
zoom_zoom = template.iloc[0:,24]
zoom_list_pre = []
zoom_list = []
for diapozone in zoom_zoom :
    if str(diapozone) != "nan" :
        zoom_list_pre.append(diapozone.split("-"))
        
for sublist in zoom_list_pre:
    zoom_list.append([float(sublist[0]),float(sublist[1])])
##############################################
#Запил границ осей игрек через подбор границ выделения блока данных под график через указанные диапозоны для зумов
border_x_plot_1_left = 0.0
border_x_plot_1_right = 0.0
border_x_plot_2_left = 0.0
border_x_plot_2_right = 0.0
border_x_plot_3_left = 0.0
border_x_plot_3_right = 0.0

if len(zoom_list) == 3 :
    
    for ind in calc_1_ind_define.index :
        if zoom_list[0][1] <= ind :
            border_x_plot_1_right = ind
            break
    
    for ind in calc_1_ind_define.index :
        if zoom_list[1][0] >= ind :
            border_x_plot_2_left = ind
    
    for ind in calc_1_ind_define.index :
        if zoom_list[1][1] <= ind :
            border_x_plot_2_right = ind
            break

    for ind in calc_1_ind_define.index :
        if zoom_list[2][0] >= ind :
            border_x_plot_3_left = ind

    for ind in calc_1_ind_define.index :
        if zoom_list[2][1] <= ind :
            border_x_plot_3_right = ind
            break

##############################################    
for i in template.iloc[0::,4] :
    calc_1 = pd.read_excel(template.iloc[start_row_ind,0], template.iloc[start_row_ind,1], index_col = int(template.iloc[0,9]), header = int(template.iloc[0,10]))
    calc_2 = pd.read_excel(template.iloc[start_row_ind,2], template.iloc[start_row_ind,3], index_col = int(template.iloc[1,9]), header = int(template.iloc[1,10]))
    ecart_c1c2 = calc_1 - calc_2
    
    image_stream = BytesIO() 
    slide = prs.slides[template.iloc[start_row_ind,31] + 1]
    
    val_sign = template.iloc[start_row_ind,6]
    
    fig = plt.figure(figsize=[9, 6], dpi=200, facecolor="white")
    ax1 = fig.add_subplot(211)
    ax1.set_xlim(zoom_list[0])
    plt.title(i+", "+val_sign, fontsize = 16, fontweight = 'roman')
    ax1.grid(which='major', axis='both')
#На следующей строке вагон пробелов дают возможность уехать имени оси далеко вправо
    ax1.set_xlabel(100*' '+'temps, s', fontsize = 14)
    plt.plot(calc_1[i][border_x_plot_1_left:border_x_plot_1_right], label = template.iloc[0,5]+" : "+i)
    plt.plot(calc_2[i][border_x_plot_1_left:border_x_plot_1_right], color = "red", label = template.iloc[1,5]+" : "+i)
    if type(template.iloc[start_row_ind,12]) == str :
        plt.plot(pd.read_excel(template.iloc[start_row_ind,12], template.iloc[start_row_ind,13], index_col = int(template.iloc[start_row_ind,14]), header = int(template.iloc[start_row_ind,15]))[template.iloc[start_row_ind,11]][border_x_plot_1_left:border_x_plot_1_right], color = "cyan", linestyle = ':', label = template.iloc[start_row_ind,20]+" : "+template.iloc[start_row_ind,11])
    
    if type(template.iloc[start_row_ind,16]) == str :
        plt.plot(pd.read_excel(template.iloc[start_row_ind,16], template.iloc[start_row_ind,17], index_col = int(template.iloc[start_row_ind,18]), header = int(template.iloc[start_row_ind,19]))[template.iloc[start_row_ind,11]][border_x_plot_1_left:border_x_plot_1_right], color = "orange", linestyle = ':', label = template.iloc[start_row_ind,21]+" : "+template.iloc[start_row_ind,11])
#тут пилятся разницы    
    ax1_1 = ax1.twinx()
    ax1_1.set_ylabel('Écart', fontsize = 14)
    plt.plot(ecart_c1c2[i][border_x_plot_1_left:border_x_plot_1_right], color = "green", linestyle = '--', label = template.iloc[0,5]+" - " + template.iloc[1,5] +" : "+i)
    
    if type(template.iloc[start_row_ind,12]) == str and type(template.iloc[start_row_ind,16]) == str :
        plt.plot(pd.read_excel(template.iloc[start_row_ind,12], template.iloc[start_row_ind,13], index_col = int(template.iloc[start_row_ind,14]), header = int(template.iloc[start_row_ind,15]))[template.iloc[start_row_ind,11]][border_x_plot_1_left:border_x_plot_1_right]-pd.read_excel(template.iloc[start_row_ind,16], template.iloc[start_row_ind,17], index_col = int(template.iloc[start_row_ind,18]), header = int(template.iloc[start_row_ind,19]))[template.iloc[start_row_ind,11]][border_x_plot_1_left:border_x_plot_1_right], label = template.iloc[start_row_ind,20]+" - " + template.iloc[start_row_ind,21] +" : "+i, color = "brown", linestyle = '-.')


        
##ЗАПИЛ ЛЕГЕНДЫ, в т.ч. управление расположением (bbox_to_anchor). Пилится только для 1-го графика, на справедлива и для него, и для зумов

    ax1.legend(loc='upper center', bbox_to_anchor=(0.25, -1.4), ncol = 2) 
    ax1_1.legend(loc='upper center', bbox_to_anchor=(0.8, -1.4), ncol = 1)
#*************************************конец запила 1-го графика    
    ax2 = fig.add_subplot(223)
    ax2.set_xlim(zoom_list[1])
    ax2.grid(which='major', axis='both')
    plt.plot(calc_1[i][border_x_plot_2_left:border_x_plot_2_right])
    plt.plot(calc_2[i][border_x_plot_2_left:border_x_plot_2_right], color = "red")
    if type(template.iloc[start_row_ind,12]) == str :
        plt.plot(pd.read_excel(template.iloc[start_row_ind,12], template.iloc[start_row_ind,13], index_col = int(template.iloc[start_row_ind,14]), header = int(template.iloc[start_row_ind,15]))[template.iloc[start_row_ind,11]][border_x_plot_2_left:border_x_plot_2_right], color = "cyan", linestyle = ':')

    if type(template.iloc[start_row_ind,16]) == str :
        plt.plot(pd.read_excel(template.iloc[start_row_ind,16], template.iloc[start_row_ind,17], index_col = int(template.iloc[start_row_ind,18]), header = int(template.iloc[start_row_ind,19]))[template.iloc[start_row_ind,11]][border_x_plot_2_left:border_x_plot_2_right], color = "orange", linestyle = ':')
#тут пилятся разницы           
    ax2_1 = ax2.twinx()
    plt.plot(ecart_c1c2[i][border_x_plot_2_left:border_x_plot_2_right], color = "green", linestyle = '--')
    
    if type(template.iloc[start_row_ind,12]) == str and type(template.iloc[start_row_ind,16]) == str :
        plt.plot(pd.read_excel(template.iloc[start_row_ind,12], template.iloc[start_row_ind,13], index_col = int(template.iloc[start_row_ind,14]), header = int(template.iloc[start_row_ind,15]))[template.iloc[start_row_ind,11]][border_x_plot_2_left:border_x_plot_2_right]-pd.read_excel(template.iloc[start_row_ind,16], template.iloc[start_row_ind,17], index_col = int(template.iloc[start_row_ind,18]), header = int(template.iloc[start_row_ind,19]))[template.iloc[start_row_ind,11]][border_x_plot_2_left:border_x_plot_2_right], color = "brown", linestyle = '-.')
        
#*************************************конец запила 2-го графика        
    ax3 = fig.add_subplot(224)
    ax3.set_xlim(zoom_list[2])
    ax3.grid(which='major', axis='both')
    plt.plot(calc_1[i][border_x_plot_3_left:border_x_plot_3_right])
    plt.plot(calc_2[i][border_x_plot_3_left:border_x_plot_3_right], color = "red")
    if type(template.iloc[start_row_ind,12]) == str :
        plt.plot(pd.read_excel(template.iloc[start_row_ind,12], template.iloc[start_row_ind,13], index_col = int(template.iloc[start_row_ind,14]), header = int(template.iloc[start_row_ind,15]))[template.iloc[start_row_ind,11]][border_x_plot_3_left:border_x_plot_3_right], color = "cyan", linestyle = ':')

    if type(template.iloc[start_row_ind,16]) == str :
        plt.plot(pd.read_excel(template.iloc[start_row_ind,16], template.iloc[start_row_ind,17], index_col = int(template.iloc[start_row_ind,18]), header = int(template.iloc[start_row_ind,19]))[template.iloc[start_row_ind,11]][border_x_plot_3_left:border_x_plot_3_right], color = "orange", linestyle = ':')
#тут пилятся разницы           
    ax3_1 = ax3.twinx()
    plt.plot(ecart_c1c2[i][border_x_plot_3_left:border_x_plot_3_right], color = "green", linestyle = '--')
    
    if type(template.iloc[start_row_ind,12]) == str and type(template.iloc[start_row_ind,16]) == str :
        plt.plot(pd.read_excel(template.iloc[start_row_ind,12], template.iloc[start_row_ind,13], index_col = int(template.iloc[start_row_ind,14]), header = int(template.iloc[start_row_ind,15]))[template.iloc[start_row_ind,11]][border_x_plot_3_left:border_x_plot_3_right]-pd.read_excel(template.iloc[start_row_ind,16], template.iloc[start_row_ind,17], index_col = int(template.iloc[start_row_ind,18]), header = int(template.iloc[start_row_ind,19]))[template.iloc[start_row_ind,11]][border_x_plot_3_left:border_x_plot_3_right], color = "brown", linestyle = '-.')
    
#*************************************конец запила 3-го графика        
    start_row_ind += 1
    
    plt.subplots_adjust(wspace=0.35, hspace = 0.3)
    plt.show()
    
    fig.savefig(image_stream)
    pic = slide.shapes.add_picture(image_stream, left, top, width, height)
#################Запиливание таблицы экартов по контрольным точкам
    tab_x, tab_y, tab_cx, tab_cy = Inches(7), Inches(0.1), Inches(0.5)*len(template.iloc[1,5]), Inches(0.2)
    shape = slide.shapes.add_table(4, control_point_counter + 1, tab_x, tab_y, tab_cx, tab_cy)
    table = shape.table

    cell = table.cell(1, 0)
    cell.fill.solid()
    cell.fill.fore_color.rgb = RGBColor(176,196,222)
    cell.text_frame.text = template.iloc[0,5]
    cell.text_frame._set_font("Calibri", size = 12, bold = True, italic = True)    

    cell = table.cell(2, 0)
    cell.fill.solid()
    cell.fill.fore_color.rgb = RGBColor(176,196,222)
    cell.text_frame.text = template.iloc[1,5]
    cell.text_frame._set_font("Calibri", size = 12, bold = True, italic = True)
    
    cell = table.cell(3, 0)
    cell.fill.solid()
    cell.fill.fore_color.rgb = RGBColor(176,196,222)
    cell.text_frame.text = "Écart"
    cell.text_frame._set_font("Calibri", size = 12, bold = True, italic = True)
    
    row_counter = 1
    column_counter = 1
    for control_point in template.iloc[0:,22] :
        if str(control_point) != "nan" :
            cell = table.cell(row_counter-1, column_counter)
            cell.fill.solid()
            cell.fill.fore_color.rgb = RGBColor(224,224,224)
            cell.text_frame.text = str(control_point)
            cell.text_frame._set_font("Calibri", size = 12, bold = True, italic = False)
            
            cell = table.cell(row_counter, column_counter)
            cell.text_frame.text = str(calc_1[i][control_point])
            cell.text_frame._set_font("Calibri", size = 10, bold = False, italic = False)                
    
            cell = table.cell(row_counter+1, column_counter)
            cell.text_frame.text = str(calc_2[i][control_point])
            cell.text_frame._set_font("Calibri", size = 10, bold = False, italic = False)    
    
            cell = table.cell(row_counter+2, column_counter)
            cell.text_frame.text = str(round(calc_1[i][control_point]-calc_2[i][control_point], 1))
            cell.text_frame._set_font("Calibri", size = 10, bold = False, italic = False)          

            column_counter +=1
##################################################################
prs.save(template.iloc[0,30][:-5]+"_after_zapil.pptx")
